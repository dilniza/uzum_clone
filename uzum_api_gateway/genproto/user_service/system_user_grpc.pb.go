// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: system_user.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UsService_Create_FullMethodName  = "/user_service.UsService/Create"
	UsService_GetByID_FullMethodName = "/user_service.UsService/GetByID"
	UsService_GetList_FullMethodName = "/user_service.UsService/GetList"
	UsService_Update_FullMethodName  = "/user_service.UsService/Update"
	UsService_Delete_FullMethodName  = "/user_service.UsService/Delete"
)

// UsServiceClient is the client API for UsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsServiceClient interface {
	Create(ctx context.Context, in *CreateUs, opts ...grpc.CallOption) (*Us, error)
	GetByID(ctx context.Context, in *UsPrimaryKey, opts ...grpc.CallOption) (*Us, error)
	GetList(ctx context.Context, in *GetListUsRequest, opts ...grpc.CallOption) (*GetListUsResponse, error)
	Update(ctx context.Context, in *UpdateUs, opts ...grpc.CallOption) (*Us, error)
	Delete(ctx context.Context, in *UsPrimaryKey, opts ...grpc.CallOption) (*Empty1, error)
}

type usServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsServiceClient(cc grpc.ClientConnInterface) UsServiceClient {
	return &usServiceClient{cc}
}

func (c *usServiceClient) Create(ctx context.Context, in *CreateUs, opts ...grpc.CallOption) (*Us, error) {
	out := new(Us)
	err := c.cc.Invoke(ctx, UsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usServiceClient) GetByID(ctx context.Context, in *UsPrimaryKey, opts ...grpc.CallOption) (*Us, error) {
	out := new(Us)
	err := c.cc.Invoke(ctx, UsService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usServiceClient) GetList(ctx context.Context, in *GetListUsRequest, opts ...grpc.CallOption) (*GetListUsResponse, error) {
	out := new(GetListUsResponse)
	err := c.cc.Invoke(ctx, UsService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usServiceClient) Update(ctx context.Context, in *UpdateUs, opts ...grpc.CallOption) (*Us, error) {
	out := new(Us)
	err := c.cc.Invoke(ctx, UsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usServiceClient) Delete(ctx context.Context, in *UsPrimaryKey, opts ...grpc.CallOption) (*Empty1, error) {
	out := new(Empty1)
	err := c.cc.Invoke(ctx, UsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsServiceServer is the server API for UsService service.
// All implementations must embed UnimplementedUsServiceServer
// for forward compatibility
type UsServiceServer interface {
	Create(context.Context, *CreateUs) (*Us, error)
	GetByID(context.Context, *UsPrimaryKey) (*Us, error)
	GetList(context.Context, *GetListUsRequest) (*GetListUsResponse, error)
	Update(context.Context, *UpdateUs) (*Us, error)
	Delete(context.Context, *UsPrimaryKey) (*Empty1, error)
	mustEmbedUnimplementedUsServiceServer()
}

// UnimplementedUsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsServiceServer struct {
}

func (UnimplementedUsServiceServer) Create(context.Context, *CreateUs) (*Us, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUsServiceServer) GetByID(context.Context, *UsPrimaryKey) (*Us, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedUsServiceServer) GetList(context.Context, *GetListUsRequest) (*GetListUsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedUsServiceServer) Update(context.Context, *UpdateUs) (*Us, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUsServiceServer) Delete(context.Context, *UsPrimaryKey) (*Empty1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUsServiceServer) mustEmbedUnimplementedUsServiceServer() {}

// UnsafeUsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsServiceServer will
// result in compilation errors.
type UnsafeUsServiceServer interface {
	mustEmbedUnimplementedUsServiceServer()
}

func RegisterUsServiceServer(s grpc.ServiceRegistrar, srv UsServiceServer) {
	s.RegisterService(&UsService_ServiceDesc, srv)
}

func _UsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsServiceServer).Create(ctx, req.(*CreateUs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsServiceServer).GetByID(ctx, req.(*UsPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListUsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsServiceServer).GetList(ctx, req.(*GetListUsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsServiceServer).Update(ctx, req.(*UpdateUs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsServiceServer).Delete(ctx, req.(*UsPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// UsService_ServiceDesc is the grpc.ServiceDesc for UsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.UsService",
	HandlerType: (*UsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UsService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _UsService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _UsService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system_user.proto",
}
